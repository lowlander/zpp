var annotated_dup =
[
    [ "zpp", "namespacezpp.html", [
      [ "atomic_bitset", "classzpp_1_1atomic__bitset.html", "classzpp_1_1atomic__bitset" ],
      [ "atomic_var", "classzpp_1_1atomic__var.html", "classzpp_1_1atomic__var" ],
      [ "uptime_clock", "classzpp_1_1uptime__clock.html", "classzpp_1_1uptime__clock" ],
      [ "cycle_clock", "classzpp_1_1cycle__clock.html", "classzpp_1_1cycle__clock" ],
      [ "condition_variable_base", "classzpp_1_1condition__variable__base.html", "classzpp_1_1condition__variable__base" ],
      [ "condition_variable", "classzpp_1_1condition__variable.html", "classzpp_1_1condition__variable" ],
      [ "condition_variable_ref", "classzpp_1_1condition__variable__ref.html", "classzpp_1_1condition__variable__ref" ],
      [ "fifo_base", "classzpp_1_1fifo__base.html", "classzpp_1_1fifo__base" ],
      [ "fifo", "classzpp_1_1fifo.html", "classzpp_1_1fifo" ],
      [ "fifo_ref", "classzpp_1_1fifo__ref.html", "classzpp_1_1fifo__ref" ],
      [ "futex_base", "classzpp_1_1futex__base.html", "classzpp_1_1futex__base" ],
      [ "futex", "classzpp_1_1futex.html", "classzpp_1_1futex" ],
      [ "futex_ref", "classzpp_1_1futex__ref.html", "classzpp_1_1futex__ref" ],
      [ "base_heap", "classzpp_1_1base__heap.html", "classzpp_1_1base__heap" ],
      [ "heap", "classzpp_1_1heap.html", "classzpp_1_1heap" ],
      [ "heap_ref", "classzpp_1_1heap__ref.html", "classzpp_1_1heap__ref" ],
      [ "lock_guard", "classzpp_1_1lock__guard.html", "classzpp_1_1lock__guard" ],
      [ "mem_slab_base", "classzpp_1_1mem__slab__base.html", "classzpp_1_1mem__slab__base" ],
      [ "mem_slab", "classzpp_1_1mem__slab.html", "classzpp_1_1mem__slab" ],
      [ "mem_slab_ref", "classzpp_1_1mem__slab__ref.html", "classzpp_1_1mem__slab__ref" ],
      [ "mutex_base", "classzpp_1_1mutex__base.html", "classzpp_1_1mutex__base" ],
      [ "mutex", "classzpp_1_1mutex.html", "classzpp_1_1mutex" ],
      [ "mutex_ref", "classzpp_1_1mutex__ref.html", "classzpp_1_1mutex__ref" ],
      [ "poll_event", "classzpp_1_1poll__event.html", "classzpp_1_1poll__event" ],
      [ "poll_event_set", "classzpp_1_1poll__event__set.html", "classzpp_1_1poll__event__set" ],
      [ "poll_signal_base", "classzpp_1_1poll__signal__base.html", "classzpp_1_1poll__signal__base" ],
      [ "poll_signal", "classzpp_1_1poll__signal.html", "classzpp_1_1poll__signal" ],
      [ "poll_signal_ref", "classzpp_1_1poll__signal__ref.html", "classzpp_1_1poll__signal__ref" ],
      [ "error_result", "classzpp_1_1error__result.html", "classzpp_1_1error__result" ],
      [ "result", "classzpp_1_1result.html", "classzpp_1_1result" ],
      [ "result< void, T_Error >", "classzpp_1_1result_3_01void_00_01T__Error_01_4.html", "classzpp_1_1result_3_01void_00_01T__Error_01_4" ],
      [ "sched_lock_guard", "classzpp_1_1sched__lock__guard.html", "classzpp_1_1sched__lock__guard" ],
      [ "sem_base", "classzpp_1_1sem__base.html", "classzpp_1_1sem__base" ],
      [ "sem", "classzpp_1_1sem.html", "classzpp_1_1sem" ],
      [ "sem_ref", "classzpp_1_1sem__ref.html", "classzpp_1_1sem__ref" ],
      [ "sys_mutex_base", "classzpp_1_1sys__mutex__base.html", "classzpp_1_1sys__mutex__base" ],
      [ "sys_mutex", "classzpp_1_1sys__mutex.html", "classzpp_1_1sys__mutex" ],
      [ "sys_mutex_ref", "classzpp_1_1sys__mutex__ref.html", "classzpp_1_1sys__mutex__ref" ],
      [ "thread", "classzpp_1_1thread.html", "classzpp_1_1thread" ],
      [ "thread_start_delay", "structzpp_1_1thread__start__delay.html", "structzpp_1_1thread__start__delay" ],
      [ "thread_attr", "classzpp_1_1thread__attr.html", "classzpp_1_1thread__attr" ],
      [ "thread_data", "classzpp_1_1thread__data.html", "classzpp_1_1thread__data" ],
      [ "thread_id", "classzpp_1_1thread__id.html", "classzpp_1_1thread__id" ],
      [ "thread_prio", "classzpp_1_1thread__prio.html", "classzpp_1_1thread__prio" ],
      [ "thread_stack", "classzpp_1_1thread__stack.html", "classzpp_1_1thread__stack" ],
      [ "timer_base", "classzpp_1_1timer__base.html", "classzpp_1_1timer__base" ],
      [ "timer", "classzpp_1_1timer.html", "classzpp_1_1timer" ],
      [ "basic_timer", "classzpp_1_1basic__timer.html", "classzpp_1_1basic__timer" ],
      [ "sync_timer", "classzpp_1_1sync__timer.html", "classzpp_1_1sync__timer" ],
      [ "unique_lock", "classzpp_1_1unique__lock.html", "classzpp_1_1unique__lock" ]
    ] ]
];